#!/usr/bin/python2

import sys
import time
import logging
import argparse
import datetime

import yaml

from growd.hw.raspberry import Raspberry
from growd.hw.sht21 import SHT21
from growd.hw.ezo_ph import EzoPH
from growd.hw.relay import Relay
from growd.metrics import MetricsSender
import growd.utils

SAMPLING_PERIOD = 2 # seconds

def read_and_send_sensors(sensors, relay_state, metrics):
    readings = {}
    for s in sensors:
        readings.update(s.read_sensor())

    logging.debug(', '.join('%s: %.2f' % (k,v) for (k,v) in readings.items()))

    for name, state in relay_state.items():
        val = 1.0 if state else 0.0
        readings['relay.' + name] = val

    metrics.send(readings)


def main(args):
    parser = argparse.ArgumentParser(prog='growd-tempsender')
    parser.add_argument('-v', '--verbose', action='store_true', help='print uninteresting info')
    parser.add_argument('--no-log-time', action='store_true', help="don't log timestamps to stderr")
    parser.add_argument('--sampling-period', type=int, default=SAMPLING_PERIOD, help='take temp/hum measurement every ? seconds')
    parser.add_argument('-c', '--config', type=str, help='path to configuration file')
    opts = parser.parse_args(args)

    growd.utils.setup_logging(verbose=opts.verbose, timestamp=(not opts.no_log_time))

    if not opts.config:
        logging.critical('Need configuration file')
        sys.exit(1)

    with open(opts.config, 'r') as fh:
        config = yaml.safe_load(fh)

    metrics = MetricsSender(config)

    with Raspberry() as rpi:
        rpi.i2c_setup()

        # TODO: needs to be way more generic
        sensors = []
        for s in config.get('sensors', []):
            if s == 'sht21':
                sensors.append(SHT21(rpi.i2c[1]))
            elif s == 'ezo_ph':
                sensors.append(EzoPH(rpi.i2c[1]))
            else:
                logging.critical('Unknown sensor: {0}'.format(s))
                sys.exit(1)

        relay = {}
        relay_state = {}
        for r in config.get('relays', []):
            relay[r['name']] = Relay(rpi, r['pin'])
            relay_state[r['name']] = False

        while True:
            try:
                now = datetime.datetime.now().time()

                for r in relay.keys():
                    desired_state = False

                    for t in config['timers']:
                        if t['relay'] != r:
                            continue

                        h, m, s = t['from'].split(':')
                        fro = datetime.time(int(h), int(m), int(s))

                        h, m, s = t['to'].split(':')
                        to = datetime.time(int(h), int(m), int(s))

                        # TODO: handle intervals that cross midnight
                        if fro < now and now < to:
                            desired_state = True

                    if relay_state[r] == False and desired_state == True:
                        logging.info('Enabling relay {0}'.format(r))
                        relay[r].switch(True)
                        relay_state[r] = True
                    elif relay_state[r] == True and desired_state == False:
                        logging.info('Disabling relay {0}'.format(r))
                        relay[r].switch(False)
                        relay_state[r] = False

                try:
                    read_and_send_sensors(sensors, relay_state, metrics)
                except:
                    logging.exception('Failed to read sensors')

                time.sleep(opts.sampling_period)
            except KeyboardInterrupt:
                logging.info('User requested exit')
                break
            except Exception as e:
                logging.exception('Main loop error')

if __name__ == '__main__':
    main(sys.argv[1:])
