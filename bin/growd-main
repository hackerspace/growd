#!/usr/bin/python2

import sys
import time
import logging
import argparse
import datetime

import yaml

from growd.hw.raspberry import Raspberry
from growd.hw.sht21 import SHT21
from growd.hw.relay import Relay
from growd.metrics.simple import SimpleMetrics
from growd.metrics.carbon import CarbonMetrics
import growd.utils

SAMPLING_PERIOD = 2 # seconds

def init_metrics(config):
    metrics = []

    for m in config.get('metrics', []):
        if m['type'] == 'simple':
            metrics.append(SimpleMetrics(m['url']))
        elif m['type'] == 'carbon':
            metrics.append(CarbonMetrics(m['host'], ident=m.get('id')))

    return metrics

def read_and_send_sensors(temp_sensor, hum_sensor, relay_state, metrics_receivers):
    temp = temp_sensor.read_temperature()
    hum = hum_sensor.read_humidity()
    logging.debug('T: %.2f C, H: %.2f %%' % (temp, hum))

    sensors = {
        'temp': temp,
        'hum': hum,
    }

    for m in metrics_receivers:
        #TODO: try-catch?
        m.send(sensors.copy(), relay_state.copy())


def main(args):
    parser = argparse.ArgumentParser(prog='growd-tempsender')
    parser.add_argument('-v', '--verbose', action='store_true', help='print uninteresting info')
    parser.add_argument('--sampling-period', type=int, default=SAMPLING_PERIOD, help='take temp/hum measurement every ? seconds')
    parser.add_argument('-c', '--config', type=str, help='path to configuration file')
    opts = parser.parse_args(args)

    growd.utils.setup_logging(verbose=opts.verbose)

    if not opts.config:
        logging.critical('Need configuration file')
        sys.exit(1)

    with open(opts.config, 'r') as fh:
        config = yaml.safe_load(fh)

    metrics_receivers = init_metrics(config)

    with Raspberry() as rpi:
        rpi.i2c_setup()
        sht21 = SHT21(rpi.i2c[1])

        relay = {}
        relay_state = {}
        for r in config['relays']:
            relay[r['name']] = Relay(rpi, r['pin'])
            relay_state[r['name']] = False

        while True:
            try:
                now = datetime.datetime.now().time()

                for r in relay.keys():
                    desired_state = False

                    for t in config['timers']:
                        if t['relay'] != r:
                            continue

                        h, m, s = t['from'].split(':')
                        fro = datetime.time(int(h), int(m), int(s))

                        h, m, s = t['to'].split(':')
                        to = datetime.time(int(h), int(m), int(s))

                        # TODO: handle intervals that cross midnight
                        if fro < now and now < to:
                            desired_state = True

                    if relay_state[r] == False and desired_state == True:
                        logging.info('Enabling relay {0}'.format(r))
                        relay[r].switch(True)
                        relay_state[r] = True
                    elif relay_state[r] == True and desired_state == False:
                        logging.info('Disabling relay {0}'.format(r))
                        relay[r].switch(False)
                        relay_state[r] = False

                try:
                    read_and_send_sensors(sht21, sht21, relay_state, metrics_receivers)
                except:
                    logging.exception('Failed to read sensors')

                time.sleep(opts.sampling_period)
            except KeyboardInterrupt:
                logging.info('User requested exit')
                break
            except Exception as e:
                logging.exception('Main loop error')

if __name__ == '__main__':
    main(sys.argv[1:])
